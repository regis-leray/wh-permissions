default:
  tags:
    - unity-aws-kubernetes-dev-eu-west-1-eks04

stages:
  - test
  - build
  - security-test
  - distribute
  - publish
  - plan
  - apply
  - integration-test
  - notify

include:
  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
    ref: main
    file: parts/scala-app.yaml
  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
    ref: main
    file: parts/tasks/ISpec-template.yaml
  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
    ref: main
    file: parts/tasks/cd-templates.yaml
  - project: williamhillplc/infosec/devsecops/gitlabci-templates
    ref: 1.5.1
    file: security/basic.yml
#  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
#    ref: main
#    file: parts/unity-service-cd-tasks.yaml
  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
    ref: main
    file: gitlab/runners.yaml

variables:
  PushImageRegistry: nexus-uploads.dtc.prod.williamhill.plc
  PullImageRegistry: nexus-aws.dtc.prod.williamhill.plc
  Docker_Namespace: platform
  IMAGE_NAME: $PushImageRegistry/$Docker_Namespace/permissions-ep:$CI_COMMIT_SHORT_SHA
  Source_Images_List: |
      $IMAGE_NAME
  HELMFILE_IMAGE: nexus-aws.dtc.prod.williamhill.plc/unity/helmfile:0.140.0-3.7.0
  KUBERNETES_CPU_REQUEST: 1
  KUBERNETES_CPU_LIMIT: 3
  KUBERNETES_MEMORY_REQUEST: 2Gi
  KUBERNETES_MEMORY_LIMIT: 4Gi
  SELECTOR:
    description: "Selector to apply for Helmfile, for example `--selector project=be`"
    value: ""
  ATTEMPT_PROD_DEPLOY:
    description: "Boolean variable whether to show Prod deployment stage."
    value: "false"

# security scanning
container_scanning:
  variables:
    CONTAINER_SCANNING_DISABLED: "true"
  rules:
    - if: $CONTAINER_SCANNING_DISABLED == "true"
      when: never
    - if: $CI_COMMIT_BRANCH

spotbugs-sast:
  extends:
    - .sast-analyzer
    - .eks-dev-gitlab-runner

secret_detection:
  extends:
    - .secret-analyzer
    - .eks-dev-gitlab-runner

license_scanning:
  extends:
    - .eks-dev-gitlab-runner

dependency_scanning:
  extends:
    - .eks-dev-gitlab-runner

scan-permissions-ep-container:
  extends:
    - container_scanning
    - .eks-dev-gitlab-runner
  variables:
    DOCKER_IMAGE: $PullImageRegistry/$Docker_Namespace/permissions-ep:$CI_COMMIT_SHORT_SHA
    CONTAINER_SCANNING_DISABLED: "false"


# lint checks
Run scalafmt and scalafix checks:
  extends: .execute-sbt-task-v3
  stage: test
  variables:
    Sbt_Java_Version: 11
    Sbt_Tasks: "lint-checks"
  except: [tags, triggers]

# test
Run unit tests:
  extends: .execute-sbt-tasks-with-docker-v3
  stage: test
  variables:
    Sbt_Tasks: "clean coverage test"
  except: [tags, schedules]
  artifacts:
    when: always
    expire_in: 1 day
    paths:
      - ./**/target
      - ./target
  dependencies: [Run scalafmt and scalafix checks]

# build
Build docker images:
  extends: .execute-sbt-tasks-with-docker-v3 #see https://gitlab.com/williamhillplc/usa/betting-engine/infra/be-ci/blob/main-v3/parts/tasks/sbt-tasks.yaml
  stage: build
  variables:
    Sbt_Java_Version: 11
    Sbt_Tasks: >-
      -mem 2048 docker
  before_script:
    - export Images_To_Push_After=$Source_Images_List
  except: [tags, schedules]
  dependencies: []


# distribute
Add extra docker tags and mirror:
  extends: .add-extra-docker-tags-v2
  before_script:
    - export Input_Images=$Source_Images_List
    - export Extra_Retag_Args="--target-tag $CI_BUILD_REF_SLUG"
  stage: distribute
  except: [tags, schedules]

Add extra docker tags and mirror for git tag:
  extends: .add-extra-docker-tags-v2
  before_script:
    - export Input_Images=$Source_Images_List
    - export Extra_Retag_Args="--target-tag $CI_COMMIT_TAG"
  stage: distribute
  only: [tags]

# publish
Publish Helm to Nexus:
  extends:
    - .helm-push-nexus-v1-k8s
    - .eks-dev-gitlab-runner
  stage: publish

Publish Helm to Nexus Tag:
  extends:
    - .helm-push-nexus-v1-tags-k8s
    - .eks-dev-gitlab-runner
  stage: publish

# plan

#temp_sit_diff:
#  extends:
#    - .sit
#    - .helmfile_diff
#  when: manual
#
#temp_sit_apply:
#  extends:
#    - .sit
#    - .helmfile_apply
#  when: manual
#  resource_group: sit_apply
#  needs:
#    - temp_sit_diff

## unity release steps
.helmfile_diff:
  image: ${HELMFILE_IMAGE}
  stage: plan
  script:
    - env
    - cd helmfile
    - helmfile -e $Environment -n $Namespace $SELECTOR diff
    -
.helmfile_apply:
  image: ${HELMFILE_IMAGE}
  stage: apply
  script:
    - env
    - cd helmfile
    - helmfile -e $Environment -n $Namespace $SELECTOR sync
  after_script:
    - ./helmfile/scripts/helm-version.sh $Namespace $xInsertKey $newRelicAccount

# e2e
.trigger_tests:
  variables:
    UPSTREAM_BRANCH: $UPSTREAM_BRANCH
    UPSTREAM_PROJECT: $UPSTREAM_PROJECT
    UPSTREAM_COMMIT_AUTHOR: $UPSTREAM_COMMIT_AUTHOR
    UPSTREAM_USER_NAME: $UPSTREAM_USER_NAME
  stage: integration-test
  trigger:
    strategy: depend

# notify
notify:
  image: nexus-aws.dtc.prod.williamhill.plc/mirrors/curlimages/curl:7.77.0
  stage: notify
  script: |
    UPSTREAM_COMMIT_AUTHOR="${UPSTREAM_COMMIT_AUTHOR:=n/a}"
    UPSTREAM_USER_NAME="${UPSTREAM_USER_NAME:=n/a}"
    curl -X POST --data-urlencode "payload={\"channel\": \"#unity-developers-team-d\", \"username\": \"Develop pipeline failure bot\", \"attachments\": [{\"color\": \"#DC143C\",\"title\": \"The latest pipeline failed on develop\",\"title_link\": \"$CI_PIPELINE_URL\",\"fields\": [{\"value\": \"Upstream commit author: $UPSTREAM_COMMIT_AUTHOR\"},{\"value\": \"Upstream pipeline triggered by: $UPSTREAM_USER_NAME\"},{\"value\": \"Triggered by: $GITLAB_USER_NAME\"}]}], \"icon_emoji\": \":robot:\"}" "$UNITY_TEAM_C_SLACK_HOOK_URL"
  only: ["develop"]
  when: on_failure
