default:
  tags:
    - unity-aws-kubernetes-dev-eu-west-1-eks04

stages:
  - test
  - build
  # - security-test
  # - distribute
  # - publish
  # - plan
  # - apply
  # - integration-test
  - notify

include:
  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
    ref: 2.1.0
    file: parts/scala-app.yaml
  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
    ref: 2.1.0
    file: parts/tasks/ISpec-template.yaml
  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
    ref: 2.1.0
    file: parts/tasks/cd-templates.yaml
  # - project: williamhillplc/infosec/devsecops/gitlabci-templates
  #   ref: 1.5.1
  #   file: security/basic.yml
  # - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
  #   ref: 2.1.0
  #   file: parts/tasks/standard-version.yaml
  # - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
  #   ref: 2.1.0
  #   file: parts/unity-service-cd-tasks.yaml

variables:
  PushImageRegistry: nexus-uploads.dtc.prod.williamhill.plc
  PullImageRegistry: nexus-aws.dtc.prod.williamhill.plc
  Docker_Namespace: platform
  ECRRepo: 491326712076.dkr.ecr.eu-west-1.amazonaws.com/pam
  SAST_EXCLUDED_ANALYZERS: "spotbugs"
  Source_Images_List: |
    $ECRRepo/permission-service:$CI_COMMIT_SHORT_SHA

  HELMFILE_IMAGE: nexus-aws.dtc.prod.williamhill.plc/unity/helmfile:0.140.0-3.7.0
  KUBERNETES_CPU_REQUEST: 1
  KUBERNETES_CPU_LIMIT: 3
  KUBERNETES_MEMORY_REQUEST: 2Gi
  KUBERNETES_MEMORY_LIMIT: 4Gi
  SELECTOR:
    description: "Selector to apply for Helmfile, for example `--selector project=be`"
    value: ""
  ATTEMPT_PROD_DEPLOY:
    description: "Boolean variable whether to show Prod deployment stage."
    value: "false"

# test
Run scalafmt and scalafix checks:
  extends: .execute-sbt-task-v3
  stage: test
  variables:
    Sbt_Java_Version: 11
    Sbt_Tasks: "all-checks"
  except: [tags, triggers]

Run unit tests:
  extends: .execute-sbt-tasks-with-docker-v3
  stage: test
  variables:
    Sbt_Tasks: "clean coverage test"
  except: [tags, schedules]
  artifacts:
    when: always
    expire_in: 1 day
    paths:
      - ./**/target
      - ./target
  dependencies: [Run scalafmt and scalafix checks]

# build
# Build docker images:
#   extends: .execute-sbt-tasks-with-docker-v4
#   stage: build
#   variables:
#     Sbt_Java_Version: 11
#     Sbt_Tasks: >-
#       docker
#   before_script:
#     - export Images_To_Push_After=$Source_Images_List
#     - export ECRRepository=$ECRRepo
#   except: [tags]
#   dependencies: []

# TODO: will we even need it later?
# Publish test results:
#   extends: .execute-sbt-task-v3
#   stage: build
#   script:
#     - |
#       echo "Uploading service test results"
#       for f in ./target/test-reports/*.xml
#       do
#         echo export results from file $f
#         curl -H "Content-Type: multipart/form-data" -u $jira_user:$jira_password -F "file=@$f" "https://jira.willhillatlas.com/rest/raven/1.0/import/execution/junit?projectKey=UNITY"
#       done
#   except: [tags]

# security-test
# scan-permission-service-container:
#   extends: container_scanning
#   variables:
#     DOCKER_IMAGE: $ECRRepo/permission-service:$CI_COMMIT_SHORT_SHA

# distribute
# Add extra docker tags and mirror:
#   extends: .add-extra-docker-tags-v2
#   stage: distribute
#   before_script:
#     - export Input_Images=$Source_Images_List
#     - export Extra_Retag_Args="--target-tag $CI_BUILD_REF_SLUG --target-registry $ECRRepo"
#   dependencies: []

# Add extra docker tags and mirror for git tag:
#   extends: .add-extra-docker-tags-v2
#   stage: distribute
#   before_script:
#     - export Input_Images=$Source_Images_List
#     - export Extra_Retag_Args="--target-tag $CI_COMMIT_TAG --target-registry $ECRRepo"
#   except: []
#   only: [tags]
#   dependencies: []

# publish
# Publish Helm to Nexus:
#   extends: .helm-push-nexus-v1
#   stage: publish

# Publish Helm to Nexus Tag:
#   extends: .helm-push-nexus-v1-tags
#   stage: publish

# Publish Snapshots - wallet-messaging-model wallet-api-model wallet-testkit:
#   extends: .execute-sbt-task-v3
#   stage: publish
#   environment: NEXUS_DTC_PUBLISH
#   variables:
#     Sbt_Java_Version: 11
#     Sbt_Tasks: "+wallet-messaging-model/publish +wallet-api-model/publish +wallet-testkit/publish"
#   except: [develop, tags]

# Publish Releases - wallet-messaging-model wallet-api-model wallet-testkit:
#   extends: .execute-sbt-task-v3
#   stage: publish
#   environment: NEXUS_DTC_PUBLISH
#   variables:
#     Sbt_Java_Version: 11
#     Sbt_Tasks: "'set ThisBuild / isSnapshot := false' 'set ThisBuild / isVersionStable := true' +wallet-messaging-model/publish +wallet-api-model/publish +wallet-testkit/publish"
#   # we only want this to run on the tag created by conventional commits post merge to develop
#   rules:
#     - if: '$CI_COMMIT_TAG =~ /^v[0-9]*\.[0-9]*\.[0-9]*.*/'

# plan
# .helmfile_diff:
#   image: ${HELMFILE_IMAGE}
#   stage: plan
#   script:
#     - env
#     - cd helmfile
#     - helmfile -e $Environment -n $Namespace $SELECTOR diff

# apply
# .helmfile_apply:
#   image: ${HELMFILE_IMAGE}
#   stage: apply
#   script:
#     - env
#     - cd helmfile
#     - helmfile -e $Environment -n $Namespace $SELECTOR sync
#   after_script:
#     - ./helmfile/scripts/helm-version.sh $Namespace $xInsertKey $newRelicAccount

# integration-test
# .trigger_tests:
#   variables:
#     UPSTREAM_BRANCH: $UPSTREAM_BRANCH
#     UPSTREAM_PROJECT: $UPSTREAM_PROJECT
#     UPSTREAM_COMMIT_AUTHOR: $UPSTREAM_COMMIT_AUTHOR
#     UPSTREAM_USER_NAME: $UPSTREAM_USER_NAME
#   stage: integration-test
#   trigger:
#     strategy: depend

# notify
notify:
  image: nexus-aws.dtc.prod.williamhill.plc/mirrors/curlimages/curl:7.77.0
  stage: notify
  script: |
    UPSTREAM_COMMIT_AUTHOR="${UPSTREAM_COMMIT_AUTHOR:=n/a}"
    UPSTREAM_USER_NAME="${UPSTREAM_USER_NAME:=n/a}"
    curl -X POST --data-urlencode "payload={\"channel\": \"#unity-developers-team-d\", \"username\": \"Develop pipeline failure bot\", \"attachments\": [{\"color\": \"#DC143C\",\"title\": \"The latest pipeline failed on develop\",\"title_link\": \"$CI_PIPELINE_URL\",\"fields\": [{\"value\": \"Upstream commit author: $UPSTREAM_COMMIT_AUTHOR\"},{\"value\": \"Upstream pipeline triggered by: $UPSTREAM_USER_NAME\"},{\"value\": \"Triggered by: $GITLAB_USER_NAME\"}]}], \"icon_emoji\": \":robot:\"}" "$UNITY_TEAM_C_SLACK_HOOK_URL"
  only: ["develop"]
  when: on_failure
