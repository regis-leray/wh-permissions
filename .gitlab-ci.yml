stages:
  - build
  - test
  - distribute
  - publish
  - plan
  - apply
  - post-deploy
  - retag
  - integration-test
  - notify

include:
  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
    ref: main
    file:
      - gitlab/runners.yaml
      - gitlab/appsec_commons.yaml
  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
    ref: 2.2.4
    file: parts/scala-app.yaml
    rules:
      - if: $CI_PROJECT_URL =~ /.*williamhillplc.*/
  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
    ref: 2.2.4
    file: parts/tasks/cd-templates.yaml
  - project: williamhillplc/infosec/devsecops/gitlabci-templates
    ref: 1.6.3
    file: security/basic.yml
  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
    ref: 2.2.4
    file: parts/unity-service-cd-tasks.yaml
  - project: williamhillplc/platform-engineering/unity/pipelines/ci-templates
    ref: main
    file:
      - gitlab/runners.yaml
      - gitlab/appsec_commons.yaml
  - project: caesarsdigital/usa/betting-engine/infra/be-ci
    ref: main-v3
    file:
      - parts/tasks/gitlab-runners.yaml
      - parts/scala-app.yaml
    rules:
      - if: $CI_PROJECT_URL =~ /.*caesarsdigital.*/


variables:
  NexusUploadRegistry: nexus-uploads.dtc.prod.williamhill.plc
  Docker_Namespace: platform
  IMAGE_NAME: ${NexusUploadRegistry}/$Docker_Namespace/permissions-ep:$CI_COMMIT_SHORT_SHA
  Source_Images_List: |
    $IMAGE_NAME
  HELMFILE_IMAGE: $NexusDownloadRegistry/unity/helmfile:0.140.0-3.7.0
  SbtBuildImage: $NexusDownloadRegistry/unity/scala-sbt:11.0.14.1_1.6.2_2.13.8
  KUBERNETES_CPU_REQUEST: 1
  KUBERNETES_CPU_LIMIT: 3
  KUBERNETES_MEMORY_REQUEST: 2Gi
  KUBERNETES_MEMORY_LIMIT: 4Gi
  SELECTOR:
    description: "Selector to apply for Helmfile, for example `--selector project=be`"
    value: ""
  ATTEMPT_PROD_DEPLOY:
    description: "Boolean variable whether to show Prod deployment stage."
    value: "false"

# security scanning
container_scanning:
  variables:
    CONTAINER_SCANNING_DISABLED: "true"
  rules:
    - if: $CONTAINER_SCANNING_DISABLED == "true"
      when: never
    - if: $CI_COMMIT_BRANCH

spotbugs-sast:
  extends:
    - .sast-analyzer
    - .eks-dev-gitlab-runner

secret_detection:
  extends:
    - .secret-analyzer
    - .eks-dev-gitlab-runner

license_scanning:
  extends:
    - .eks-dev-gitlab-runner

dependency_scanning:
  extends:
    - .eks-dev-gitlab-runner

scan-permissions-ep-container:
  extends:
    - container_scanning
    - .eks-dev-gitlab-runner
  variables:
    DOCKER_IMAGE: ${NexusDownloadRegistry}/$Docker_Namespace/permissions-ep:$CI_COMMIT_SHORT_SHA
    CONTAINER_SCANNING_DISABLED: "false"


# lint checks
Lint checks:
  extends:
    - .eks-dev-gitlab-runner
  image: $SbtBuildImage
  stage: test
  script:
    - sbt lint-checks
  except: [tags, triggers]

Run Tests:
  extends:
    - .eks-dev-gitlab-runner
  image: $SbtBuildImage
  stage: test
  before_script:
    # This cannot be a variable, because it will propagate into `services` containers and destroy everything you hold dear
    - export JAVA_HOME=/jdk-11
  script:
    - sbt clean coverage test coverageReport coverageAggregate
  coverage: '/(?:Aggregation complete. Coverage was\s*\[\s*(\d+(?:\.\d+)?)*\])/'
  artifacts:
    when: always
    expire_in: 1 day
    paths:
      - ./**/target
      - ./target
    reports:
      junit:
        - ./**/target/**/TEST*.xml
  variables:
    no_proxy: "localhost,postgres,kafka,zookeeper,schema-registry"
    JAVA_TOOL_OPTIONS: -Dhttp.nonProxyHosts=localhost|postgres|kafka|zookeeper|schema-registry -Dhttps.nonProxyHosts=localhost|postgres|kafka|zookeeper|schema-registry
    # Sadly, `variables` scoped per service are only supported from gitlab 14.5
    # so they are all glommed below:
    # TODO: move them into the appropriate services once we have a gitlab runner >= 14.5
    ZOOKEEPER_CLIENT_PORT: 2181
    ZOOKEEPER_TICK_TIME: 2000

    KAFKA_SERVERS: kafka:9092
    KAFKA_BROKER_ID: 1
    KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
    KAFKA_LISTENERS: INSIDE://kafka:9092
    KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092
    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    KAFKA_CREATE_TOPICS: "exclusion_events_v1:1:1,permission_facet_events_v1:1:1,payments_events_v2:1:1,player_events_v4:1:1,dormancy_events_v1:1:1,prohibited_player_events_v1:1:1"

    SCHEMA_REGISTRY_URL: http://schema-registry:8081
    SCHEMA_REGISTRY_HOST_NAME: schema-registry
    SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
    # These are meant for the `k8s-us-usd` runner
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_CPU_LIMIT: 4
    KUBERNETES_MEMORY_REQUEST: 8Gi
    KUBERNETES_MEMORY_LIMIT: 8Gi
  services:
    - name: ${NexusDownloadRegistry}/mirrors/digitalwonderland/zookeeper:latest
      alias: zookeeper
    - name: ${NexusDownloadRegistry}/mirrors/wurstmeister/kafka:2.12-2.5.0
      alias: kafka
    - name: ${NexusDownloadRegistry}/mirrors/confluentinc/cp-schema-registry:5.5.1
      alias: schema-registry

# build
Build docker images:
  extends:
    - .eks-dev-gitlab-runner
    - .execute-sbt-tasks-with-docker-v3 #see https://gitlab.com/williamhillplc/usa/betting-engine/infra/be-ci/blob/main-v3/parts/tasks/sbt-tasks.yaml
  stage: build
  variables:
    Sbt_Java_Version: 11
    Sbt_Tasks: >-
      -mem 2048 docker
  before_script:
    - export Images_To_Push_After=$Source_Images_List
  except: [tags, schedules]
  dependencies: []


# distribute
Add extra docker tags and mirror:
  extends:
    - .eks-dev-gitlab-runner
    - .add-extra-docker-tags-v2
  before_script:
    - export Input_Images=$Source_Images_List
    - export Extra_Retag_Args="--target-tag $CI_BUILD_REF_SLUG"
  stage: distribute
  except: [tags, schedules]

Add extra docker tags and mirror for git tag:
  extends:
    - .eks-dev-gitlab-runner
    - .add-extra-docker-tags-v2
  before_script:
    - export Input_Images=$Source_Images_List
    - export Extra_Retag_Args="--target-tag $CI_COMMIT_TAG"
  stage: distribute
  only: [tags]

# publish
Publish Helm to Nexus:
  extends:
    - .helm-push-nexus-v1-k8s
    - .eks-dev-gitlab-runner
  stage: publish

Publish Helm to Nexus Tag:
  extends:
    - .helm-push-nexus-v1-tags-k8s
    - .eks-dev-gitlab-runner
  stage: publish

#plan
## unity release steps
.helmfile_diff:
  image: ${HELMFILE_IMAGE}
  stage: plan
  script:
    - env
    - cd helmfile
    - helmfile -e $Environment -n $Namespace $SELECTOR diff

.helmfile_apply:
  image: ${HELMFILE_IMAGE}
  stage: apply
  script:
    - env
    - cd helmfile
    - helmfile -e $Environment -n $Namespace $SELECTOR sync
  after_script:
    - ./helmfile/scripts/helm-version.sh $Namespace $xInsertKey $newRelicAccount

# e2e
.trigger_tests:
  variables:
    UPSTREAM_BRANCH: $UPSTREAM_BRANCH
    UPSTREAM_PROJECT: $UPSTREAM_PROJECT
    UPSTREAM_COMMIT_AUTHOR: $UPSTREAM_COMMIT_AUTHOR
    UPSTREAM_USER_NAME: $UPSTREAM_USER_NAME
  stage: integration-test
  trigger:
    strategy: depend

# notify
notify:
  image: $NexusDownloadRegistry/mirrors/curlimages/curl:7.77.0
  stage: notify
  script: |
    UPSTREAM_COMMIT_AUTHOR="${UPSTREAM_COMMIT_AUTHOR:=n/a}"
    UPSTREAM_USER_NAME="${UPSTREAM_USER_NAME:=n/a}"
    curl -X POST --data-urlencode "payload={\"channel\": \"#unity-developers-team-d\", \"username\": \"Develop pipeline failure bot\", \"attachments\": [{\"color\": \"#DC143C\",\"title\": \"The latest pipeline failed on develop\",\"title_link\": \"$CI_PIPELINE_URL\",\"fields\": [{\"value\": \"Upstream commit author: $UPSTREAM_COMMIT_AUTHOR\"},{\"value\": \"Upstream pipeline triggered by: $UPSTREAM_USER_NAME\"},{\"value\": \"Triggered by: $GITLAB_USER_NAME\"}]}], \"icon_emoji\": \":robot:\"}" "$UNITY_TEAM_C_SLACK_HOOK_URL"
  only: ["develop"]
  when: on_failure
