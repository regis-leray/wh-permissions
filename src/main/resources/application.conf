project-name = "permissions-ep"

healthcheck {
  identifier = ${project-name}
  host = localhost
  host = ${?HEALTHCHECK_API_HOST}
  port = 8080
  port = ${?HEALTHCHECK_API_PORT}
  bootstrap-servers = ${kafka-bootstrap-servers}
  max-block-timeout = 5 seconds
  max-block-timeout = ${?MAX_BLOCK_TIMEOUT}
}

schema-registry-settings {
  fail-invalid-schema = "true"
  fail-invalid-schema = ${?KAFKA_FAIL_INVALID_SCHEMA}
  schema-registry-url = "http://localhost:30011/"
  schema-registry-url = ${?SCHEMA_REGISTRY_URL}
  subject-name-strategy = "TopicNameStrategy"
  subject-name-strategy = ${?KAFKA_SUBJECT_NAME_STRATEGY}
}

processor-settings {
  input-events {
    topics = [ exclusion_events_v1 ]
    schema-registry-settings = ${schema-registry-settings}
  }
  output-events {
    topics = [ player_facet_events_v1 ]
    schema-registry-settings = ${schema-registry-settings}
  }
  tracing-identifiers {
    group-id = ${consumer-settings.group-id}
    client-id = ${consumer-settings.client-id}
  }
  configured-universes = ${supported-universes}
}

supported-universes = "wh-mga,wh-eu-de"

consumer-settings {
  bootstrap-servers = ${kafka-bootstrap-servers}
  close-timeout = 20s
  poll-interval = 50ms
  poll-timeout = 50ms
  per-partition-chunk-prefetch = 10 # TODO: what should this value actually be?
  # [latest, earliest, none]
  offset-retrieval = "earliest"
  offset-retrieval = ${?KAFKA_OFFSET_RESET}
  group-id = ${project-name}
  group-id = ${?KAFKA_GROUP_ID}
  client-id = ${project-name}
  client-id = ${?KAFKA_CLIENT_ID}
  enable-auto-commit = false # defaults to false in code. should this be preserved?
  session-timeoutms = "10000"
}

producer-settings {
  bootstrap-servers = ${kafka-bootstrap-servers}
}

kafka-bootstrap-servers = "localhost:30009"
kafka-bootstrap-servers = ${?KAFKA_SERVERS}

kamon {
  environment.service = ${?NEW_RELIC_APP_NAME}
  newrelic {
    nr-insights-insert-key = ${?NEW_RELIC_INSIGHTS_INSERT_KEY}
    span-ingest-uri = ${?NEW_RELIC_TRACE_OBSERVER_URL}
  }

  modules {
    newrelic-span-reporter.enabled = true
    newrelic-span-reporter.enabled = ${?NEW_RELIC_ENABLED}
    newrelic-metric-reporter.enabled = true
    newrelic-metric-reporter.enabled = ${?NEW_RELIC_ENABLED}
  }

  instrumentation {
    okhttp.http-client.propagation.enabled = no

    kafka {
      client.tracing {
        continue-trace-on-consumer = yes
      }
    }
  }

  trace {
    identifier-scheme = double
    tick-interval = 60 seconds
    span-reporting-delay = 5 seconds
    join-remote-parents-with-same-span-id = no
    sampler = "adaptive"
    adaptive-sampler {
      groups {
        health-checks {
          operations = ["\/permissions-ep\/meta\/health", "\/permissions-ep\/meta\/health\/readiness"]
          rules.sample = never
        }
      }
    }
  }

  propagation.http.default.entries {
    incoming.span = "w3c"
    outgoing.span = "w3c"
  }
}

kanela.modules {
  okhttp-module.enabled = no
}

include "actions.conf"
